import { StatsDescriptor } from '@statoscope/stats';
import { Extension } from '@statoscope/stats/spec/extension';
import { Resolver } from '@statoscope/helpers/dist/entity-resolver';
import Graph from '@statoscope/helpers/dist/graph';
import { Webpack } from '../webpack';
import { ValidationResult } from './validate';
import ChunkID = Webpack.ChunkID;
export declare const normalizedSymbol: unique symbol;
export declare type NormalizedChunk = Omit<Webpack.Chunk, 'modules' | 'files' | 'children' | 'parents' | 'siblings'> & {
    modules: NormalizedModule[];
    files: NormalizedAsset[];
    children: NormalizedChunk[];
    parents: NormalizedChunk[];
    siblings: NormalizedChunk[];
};
export declare type NormalizedEntrypointItem = {
    name: string;
    data: NormalizedEntrypoint;
};
export declare type NormalizedEntrypoint = Omit<Webpack.Entrypoint, 'chunks' | 'assets'> & {
    chunks: NormalizedChunk[];
    assets: NormalizedAsset[];
    dep?: NormalizedModuleDependency;
};
export declare type NormalizedAsset = Omit<Webpack.Asset, 'chunks' | 'files'> & {
    chunks: NormalizedChunk[];
    files: Webpack.File[];
};
export declare type NormalizedIssuerPathItem = Webpack.IssuerPathItem & {
    resolvedModule: NormalizedModule | null;
    resolvedEntry?: NormalizedEntrypointItem | null;
    resolvedEntryName?: string | null;
};
export declare type NormalizedReason = Webpack.Reason & {
    resolvedModule: NormalizedModule | null;
    resolvedEntry?: NormalizedEntrypointItem | null;
    resolvedEntryName?: string | null;
};
export declare type NormalizedModuleDependency = {
    type: 'module';
    module: NormalizedModule;
    reason: NormalizedReason;
};
export declare type NormalizedModule = Omit<Webpack.Module, 'chunks' | 'reasons' | 'modules'> & {
    resolvedResource: string | null;
    resolvedModule: NormalizedModule | null;
    issuerPath: NormalizedIssuerPathItem[];
    chunks: NormalizedChunk[];
    reasons: NormalizedReason[];
    modules: NormalizedModule[];
    deps?: NormalizedModuleDependency[];
};
export declare type NormalizedPackage = {
    name: string;
    instances: NodeModuleInstance[];
};
export declare type NodeModuleInstance = {
    path: string;
    isRoot: boolean;
    reasons: Array<{
        type: 'module' | 'entry';
        data: NormalizedReason;
    }>;
    modules: NormalizedModule[];
    version?: string;
};
export declare type NormalizedCompilation = {
    time?: number;
    builtAt?: number;
    name?: string;
    hash: string;
    entrypoints: NormalizedEntrypointItem[];
    chunks: NormalizedChunk[];
    assets: NormalizedAsset[];
    modules: NormalizedModule[];
    nodeModules: NormalizedPackage[];
    children: NormalizedCompilation[];
    isChild: boolean;
    parent: string | null;
};
export declare type RawStatsFileDescriptor = {
    name: string;
    data: Webpack.Compilation;
};
export declare type NormalizedFile = {
    name: string;
    version: string;
    validation: ValidationResult;
    compilations: NormalizedCompilation[];
    __statoscope?: {
        descriptor?: StatsDescriptor;
        extensions?: Extension<unknown>[];
    };
};
export declare type NormalizedExtension<TPayload, TAPI> = {
    data: Extension<TPayload>;
    api: TAPI | null;
};
export declare type HandledStats = {
    file: NormalizedFile;
    compilations: HandledCompilation[];
    resolvers: {
        resolveExtension: Resolver<string, NormalizedExtension<unknown, unknown>>;
    };
};
export declare type CompilationResolvers = {
    resolveModule: Resolver<string, NormalizedModule>;
    resolveChunk: Resolver<ChunkID, NormalizedChunk>;
    resolveAsset: Resolver<string, NormalizedAsset>;
    resolvePackage: Resolver<string, NormalizedPackage>;
    resolveEntrypoint: Resolver<string, NormalizedEntrypointItem>;
    resolveExtension: Resolver<string, NormalizedExtension<unknown, unknown>>;
};
export declare type HandledCompilation = {
    data: NormalizedCompilation;
    resolvers: CompilationResolvers;
    graph: {
        module: Graph<ModuleGraphNodeData>;
    };
    file: NormalizedFile;
};
export declare type NormalizeResult = {
    files: NormalizedFile[];
    compilations: HandledCompilation[];
    fileResolvers: Map<string, HandledStats['resolvers']>;
};
export default function normalize(rawData: RawStatsFileDescriptor | RawStatsFileDescriptor[]): NormalizeResult;
export declare function handleRawFile(rawStatsFileDescriptor: RawStatsFileDescriptor): HandledStats;
export declare type ModuleGraphNodeData = {
    module: NormalizedModule;
    entries?: NormalizedEntrypointItem[];
};
